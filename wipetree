#!/usr/bin/python3
#+
# This script does a recursive delete of the contents of
# a specified directory, excluding the .git subdirectory
# (or a symlink thereto) at the top level. This subdirectory must
# exist, otherwise the script will raise an exception without
# deleting anything.
#
# This script is useful prior to doing a git-checkout, to ensure
# that the source tree doesn't contain anything that didn't come
# from the commit.
#
# Written by Lawrence D'Oliveiro <ldo@geek-central.gen.nz>.
#-

import sys
import os
import getopt

git_subdir_name = ".git"

#+
# Mainline
#-

verbose = False
(opts, args) = getopt.getopt \
  (
    sys.argv[1:],
    "",
    ["verbose"]
  )
for keyword, value in opts :
    if keyword == "--verbose" :
        verbose = True
    #end if
#end for
if len(args) != 1 :
    raise getopt.GetoptError("need exactly one arg, the directory to delete the contents of")
#end if
target_dir = args[0]
if os.path.islink(target_dir) or not os.path.isdir(target_dir) :
    raise getopt.GetoptError("not a dir: %s" % target_dir)
#end if
git_subdir = os.path.join(target_dir, git_subdir_name)
if not os.path.isdir(git_subdir) :
    raise getopt.GetoptError \
      (
        "no %(git)s subdir found in %(dir)s" % {"git" : git_subdir_name, "dir" : target_dir}
      )
#end if
for parent, dirs, files in os.walk(target_dir, topdown = False) :
    # The trouble with os.path.commonprefix is that it matches the initial
    # “.git” in “.github”. Python 3.5 introduces os.path.commonpath which
    # avoids this pitfall, however beware that that returns a more canonical-
    # looking path (e.g. strips off leading “./”), causing naïve path
    # comparisons to fail.
    # However, a simple fix for os.path.commonprefix is to ensure all paths
    # being compared end with “/”.
    if os.path.commonprefix([git_subdir + "/", parent + "/"]) == git_subdir + "/" :
        pass # preserve contents of .git directory
    else :
        if verbose :
            sys.stderr.write("wipe %s\n" % parent)
        #end if
        for item in files :
            os.remove(os.path.join(parent, item))
        #end for
        for item in dirs :
            if parent == target_dir and item == git_subdir_name :
                pass # preserve .git directory
            else :
                os.rmdir(os.path.join(parent, item))
            #end if
        #end for
    #end if
#end for
